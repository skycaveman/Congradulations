board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

game_on = True
winner = None
current_player = "X"
    

def play():

  display_board()

  while game_on:

    handle_turn(current_player)

    check_if_game_over()

    if not game_on:
        if winner == "X" or winner == "O":
            print(winner + " won.")
        elif winner == None:
            print("Tie.")
        check_new_game()
        if not game_on:
            break

    change_player()



def check_new_game():
    global game_on
    global board
    validInput = False

    while not validInput:
        answer = input("would you like to play again?")
        if answer == 'yes':
            validInput = True
            board.clear()
            board = ["-", "-", "-",
                 "-", "-", "-",
                 "-", "-", "-"]
            display_board()
            game_on = True
            break
        elif answer == 'no':
            validInput = True
            print("that's all folks")
            print("copy and paste the link into a url to see your prize " "Congradulations.github.io")
            break
        else:
            print("dont understand")

def display_board():
  print("\n")
  print(board[0] + " | " + board[1] + " | " + board[2] + "     1 | 2 | 3")
  print(board[3] + " | " + board[4] + " | " + board[5] + "     4 | 5 | 6")
  print(board[6] + " | " + board[7] + " | " + board[8] + "     7 | 8 | 9")
  print("\n")


def handle_turn(player):

  print(player + "'s turn.")
  position = input("Choose a position from 1-9: ")

  valid = False
  while not valid:
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
        print("Pick a valid number")
        position = input("Choose a position from 1-9: ")
 

    position = int(position) - 1

    if board[position] == "-":
      valid = True
    else:
      print("You can't go there. Go again.")


  board[position] = player


  display_board()



def check_if_game_over():
    check_for_winner()
    check_for_tie()
    #if game_on == False:
        #go thru steps of asking players if they want to play and then reset game
        #if players want to play more, set game_on to true
    


def check_for_winner():
 
  global winner

  rowMatch = check_rows()
  colMatch = check_columns()
  diagMatch = check_diagonals()

  if rowMatch:
    winner = rowMatch
  elif colMatch:
    winner = colMatch
  elif diagMatch:
    winner = diagMatch
  else:
    winner = None



def check_rows():

  global game_on

  row_1 = board[0] == board[1] == board[2] != "-"
  row_2 = board[3] == board[4] == board[5] != "-"
  row_3 = board[6] == board[7] == board[8] != "-"

  if row_1 or row_2 or row_3:
    game_on = False

  if row_1:
    return board[0] 
  elif row_2:
    return board[3] 
  elif row_3:
    return board[6] 

  else:
    return None



def check_columns():

  global game_on

  column_1 = board[0] == board[3] == board[6] != "-"
  column_2 = board[1] == board[4] == board[7] != "-"
  column_3 = board[2] == board[5] == board[8] != "-"

  if column_1 or column_2 or column_3:
    game_on = False

  if column_1:
    return board[0] 
  elif column_2:
    return board[1] 
  elif column_3:
    return board[2] 

  else:
    return None



def check_diagonals():

  global game_on

  diagonal_1 = board[0] == board[4] == board[8] != "-"
  diagonal_2 = board[2] == board[4] == board[6] != "-"
 
  if diagonal_1 or diagonal_2:
    game_on = False

  if diagonal_1:
    return board[0] 
  elif diagonal_2:
    return board[2]

  else:
    return None



def check_for_tie():

  global game_on

  if "-" not in board:
    game_on = False
    return True

  else:
    return False



def change_player():
  global current_player

  if current_player == "X":
    current_player = "O"

  elif current_player == "O":
    current_player = "X"


play()
